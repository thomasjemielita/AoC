with open((__file__.rstrip("code.py")+"input.txt"), 'r') as input_file:
input = input_file.read()
input
__file__.rstrip("code.py")+"input.txt")
indata = open("input.txt", "r")
indata
input_file = open("input.txt", "r")
input = input_file.read()
input()
input
input = input_file.read().split('\n')
input
input_file.read()
input_file = open("input.txt", "r")
input = input_file.read()
input
input_file.read().split('\n')
input_file.read()
input_file = open("input.txt", "r")
input_file.read().split('\n')
input_file = open("input.txt", "r")
input = input_file.read().split('\n')
input
input.shape
len(input)
input.len()
input.split(",")
input[1]
enumerate(input)
import numpy as np
np.array(input)
input_array = np.array(input)
input_array
input_array.split(",")
input_array.char.split(",")
input_array.np.chararray.split(",")
np.chararray.split(input_array, ",")
import pandas as pd
import pandas as pd
df = pd.DataFrame(input_array, columns = ['pairs'])
df.head()
df['pairs'].str.split(',')
df['pairs'].str.split(', ')
df['pairs'].str.split(', ').str
df['pairs'].str.split(', ').str[0]
df['pairs'].str.split(',').str[0]
df['elf1'] = df['pairs'].str.split(', ').str[0]
df['elf2'] = df['pairs'].str.split(', ').str[1]
df.head()
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df.head()
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf1'].str.split('-').str[0]
df['elf2_max'] = df['elf1'].str.split('-').str[1]
df.head()
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
df['check_1_in_2'] = df.loc[(df['elf2_min'] <= df['elf1_min'] <=  df['elf2_max']) & (df['elf2_min'] <= df['elf1_max'] <=  df['elf2_max'])]
check_1_2 = (df['elf2_min'] <= df['elf1_min'] <=  df['elf2_max']) & (df['elf2_min'] <= df['elf1_max'] <=  df['elf2_max'])
(df['elf2_min'] <= df['elf1_min'] <=  df['elf2_max'])
df['elf2_min'] <= df['elf1_min']
df['elf1_min'].between(df['elf2_min'], df['elf2_max'])
check_1_2_min = df['elf1_min'].between(df['elf2_min'], df['elf2_max'])
check_1_2_max = df['elf1_max'].between(df['elf2_min'], df['elf2_max'])
check_2_1_min = df['elf2_min'].between(df['elf1_min'], df['elf1_max'])
check_2_1_max = df['elf2_max'].between(df['elf1_min'], df['elf1_max'])
check_1_2_min
check_1_2_max
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
def flag_df(df):
check_1_2_min = df['elf1_min'].between(df['elf2_min'], df['elf2_max'])
check_1_2_max = df['elf1_max'].between(df['elf2_min'], df['elf2_max'])
check_2_1_min = df['elf2_min'].between(df['elf1_min'], df['elf1_max'])
check_2_1_max = df['elf2_max'].between(df['elf1_min'], df['elf1_max'])
if (check_1_2_min & check_1_2_max & check_2_1_min & check_1_2_min):
return 1
else:
return 0
df['flag'] = df.apply(flag_df, axis = 1)
def flag_df(df):
check_1_2_min = df['elf1_min'].between(df['elf2_min'], df['elf2_max'])
check_1_2_max = df['elf1_max'].between(df['elf2_min'], df['elf2_max'])
check_2_1_min = df['elf2_min'].between(df['elf1_min'], df['elf1_max'])
check_2_1_max = df['elf2_max'].between(df['elf1_min'], df['elf1_max'])
if (check_1_2_min & check_1_2_max & check_2_1_min & check_1_2_min):
return 1
else:
return 0
flag_df
df.apply(flag_df, axis = 1)
df['check_1_2_min'] = df['elf1_min'].between(df['elf2_min'], df['elf2_max'])
df
df['check_1_2_min'] = df['elf1_min'].between(df['elf2_min'], df['elf2_max'])
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2_min'] = df['elf1_min'].between(df['elf2_min'], df['elf2_max'])
df['check_1_2_max'] = df['elf1_max'].between(df['elf2_min'], df['elf2_max'])
df['check_2_1_min'] = df['elf2_min'].between(df['elf1_min'], df['elf1_max'])
df['check_2_1_max'] = df['elf2_max'].between(df['elf1_min'], df['elf1_max'])
df['check_1_2'] = df['elf1_min'].between(df['elf2_min'], df['elf2_max']) & df['elf1_min'].between(df['elf2_min'], df['elf2_max'])
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2'] = df['elf1_min'].between(df['elf2_min'], df['elf2_max']) & df['elf1_min'].between(df['elf2_min'], df['elf2_max'])
df['check_2_1'] = df['elf2_min'].between(df['elf1_min'], df['elf1_max']) & df['elf2_max'].between(df['elf1_min'], df['elf1_max'])
sub = df['check_1_2'] & df['check_2_1']
sub
sub = df.loc[df['check_1_2'] & df['check_2_1']]
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2'] = df['elf1_min'].between(df['elf2_min'], df['elf2_max']) & df['elf1_max'].between(df['elf2_min'], df['elf2_max'])
df['check_2_1'] = df['elf2_min'].between(df['elf1_min'], df['elf1_max']) & df['elf2_max'].between(df['elf1_min'], df['elf1_max'])
sub = df.loc[df['check_1_2'] & df['check_2_1']]
sub = df.loc[df['check_1_2'] | df['check_2_1']]
df.loc[df['check_1_2'] | df['check_2_1']].shape
df.loc[df['check_1_2'] | df['check_2_1']].shape[1]
df.loc[df['check_1_2'] | df['check_2_1']].shape[0]
df.shape
print("Total ({time} s): {value}".format(time = round(stop_time,3), value = str(num_overlapping_pairs)))
# reticulate::repl_python()
import time
import numpy as np
import pandas as pd
# Load file #
input_file = open("input.txt", "r")
input = input_file.read().split('\n')
# Start timer #
print("Starting Part One")
start_time = time.time()
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2'] = df['elf1_min'].between(df['elf2_min'], df['elf2_max']) & df['elf1_max'].between(df['elf2_min'], df['elf2_max'])
df['check_2_1'] = df['elf2_min'].between(df['elf1_min'], df['elf1_max']) & df['elf2_max'].between(df['elf1_min'], df['elf1_max'])
# Select instances where one or both elfs overlap #
num_overlapping_pairs = df.loc[df['check_1_2'] | df['check_2_1']].shape[0]
stop_time = time.time() - start_time
print("Total ({time} s): {value}".format(time = round(stop_time,3), value = str(num_overlapping_pairs)))
import time
import numpy as np
import pandas as pd
# Load file #
input_file = open("input.txt", "r")
input = input_file.read().split('\n')
print("Starting Part One")
start_time = time.time()
pairs = []
for i,line in enumerate(inputLines):
pairs.append([]) # add new pair
elf1 = line.split(',')[0]
elf2 = line.split(',')[1]
pairs[i].append([]) # for each pair, instantiate two list objects (for the two elves)
pairs[i].append([])
pairs[i][0].append(int(elf1.split('-')[0]))
pairs[i][0].append(int(elf1.split('-')[1]))
pairs[i][1].append(int(elf2.split('-')[0]))
pairs[i][1].append(int(elf2.split('-')[1]))
numOverlappingPairs = 0
for i,pair in enumerate(pairs):
if (pair[0][0] >= pair[1][0] and pair[0][1] <= pair[1][1]) \
or (pair[1][0] >= pair[0][0] and pair[1][1] <= pair[0][1]): # test if either group falls completely within the other
numOverlappingPairs+=1
part_one_time = time.time() - start_time
print("Part One ({time} s): {value}".format(time = round(part_one_time,3), value = str(numOverlappingPairs)))
start_time = time.time()
numOverlappingPairs = 0
for i,pair in enumerate(pairs):
if (pair[0][0] <= pair[1][1] and pair[0][1] >= pair[1][0]): # test if the start or end of elf 1 range overlaps with elf 2 range
numOverlappingPairs+=1
part_two_time = time.time() - start_time
print("Part Two ({time} s): {value}".format(time = round(part_two_time,3), value = str(numOverlappingPairs)))
import time
import numpy as np
import pandas as pd
# Load file #
input_file = open("input.txt", "r")
inputLines = input_file.read().split('\n')
print("Starting Part One")
start_time = time.time()
pairs = []
for i,line in enumerate(inputLines):
pairs.append([]) # add new pair
elf1 = line.split(',')[0]
elf2 = line.split(',')[1]
pairs[i].append([]) # for each pair, instantiate two list objects (for the two elves)
pairs[i].append([])
pairs[i][0].append(int(elf1.split('-')[0]))
pairs[i][0].append(int(elf1.split('-')[1]))
pairs[i][1].append(int(elf2.split('-')[0]))
pairs[i][1].append(int(elf2.split('-')[1]))
numOverlappingPairs = 0
for i,pair in enumerate(pairs):
if (pair[0][0] >= pair[1][0] and pair[0][1] <= pair[1][1]) \
or (pair[1][0] >= pair[0][0] and pair[1][1] <= pair[0][1]): # test if either group falls completely within the other
numOverlappingPairs+=1
part_one_time = time.time() - start_time
print("Part One ({time} s): {value}".format(time = round(part_one_time,3), value = str(numOverlappingPairs)))
start_time = time.time()
numOverlappingPairs = 0
for i,pair in enumerate(pairs):
if (pair[0][0] <= pair[1][1] and pair[0][1] >= pair[1][0]): # test if the start or end of elf 1 range overlaps with elf 2 range
numOverlappingPairs+=1
part_two_time = time.time() - start_time
print("Part Two ({time} s): {value}".format(time = round(part_two_time,3), value = str(numOverlappingPairs)))
import time
import numpy as np
import pandas as pd
# Load file #
input_file = open("input.txt", "r")
input = input_file.read().split('\n')
# Start timer #
print("Starting Part One")
start_time = time.time()
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2'] = df['elf1_min'].between(df['elf2_min'], df['elf2_max']) & df['elf1_max'].between(df['elf2_min'], df['elf2_max'])
df['check_2_1'] = df['elf2_min'].between(df['elf1_min'], df['elf1_max']) & df['elf2_max'].between(df['elf1_min'], df['elf1_max'])
# Select instances where one or both elfs overlap #
num_overlapping_pairs = df.loc[df['check_1_2'] | df['check_2_1']].shape[0]
stop_time = time.time() - start_time
print("Total ({time} s): {value}".format(time = round(stop_time,3), value = str(num_overlapping_pairs)))
import time
import numpy as np
import pandas as pd
# Load file #
input_file = open("input.txt", "r")
inputLines = input_file.read().split('\n')
print("Starting Part One")
start_time = time.time()
pairs = []
for i,line in enumerate(inputLines):
pairs.append([]) # add new pair
elf1 = line.split(',')[0]
elf2 = line.split(',')[1]
pairs[i].append([]) # for each pair, instantiate two list objects (for the two elves)
pairs[i].append([])
pairs[i][0].append(int(elf1.split('-')[0]))
pairs[i][0].append(int(elf1.split('-')[1]))
pairs[i][1].append(int(elf2.split('-')[0]))
pairs[i][1].append(int(elf2.split('-')[1]))
numOverlappingPairs = 0
for i,pair in enumerate(pairs):
if (pair[0][0] >= pair[1][0] and pair[0][1] <= pair[1][1]) \
or (pair[1][0] >= pair[0][0] and pair[1][1] <= pair[0][1]): # test if either group falls completely within the other
numOverlappingPairs+=1
part_one_time = time.time() - start_time
print("Part One ({time} s): {value}".format(time = round(part_one_time,3), value = str(numOverlappingPairs)))
start_time = time.time()
numOverlappingPairs = 0
for i,pair in enumerate(pairs):
if (pair[0][0] <= pair[1][1] and pair[0][1] >= pair[1][0]): # test if the start or end of elf 1 range overlaps with elf 2 range
numOverlappingPairs+=1
part_two_time = time.time() - start_time
print("Part Two ({time} s): {value}".format(time = round(part_two_time,3), value = str(numOverlappingPairs)))
# reticulate::repl_python()
import time
import numpy as np
import pandas as pd
# Load file #
input_file = open("input.txt", "r")
input = input_file.read().split('\n')
# Start timer #
print("Starting Part One")
start_time = time.time()
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
df.loc[df['check_1_2'] | df['check_2_1']]
# reticulate::repl_python()
import time
import numpy as np
import pandas as pd
# Load file #
input_file = open("input.txt", "r")
input = input_file.read().split('\n')
# Start timer #
print("Starting Part One")
start_time = time.time()
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2'] = df['elf1_min'].between(df['elf2_min'], df['elf2_max']) & df['elf1_max'].between(df['elf2_min'], df['elf2_max'])
df['check_2_1'] = df['elf2_min'].between(df['elf1_min'], df['elf1_max']) & df['elf2_max'].between(df['elf1_min'], df['elf1_max'])
View(df)
df[14]
df[14,]
df.iloc[14]
df.iloc[15]
df.iloc[14]
df.iloc[13]
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2'] = (df['elf2_min'] <= df['elf1_min'] & df['elf1_min'] <= df['elf2_max']) \
& (df['elf2_min'] <= df['elf1_max'] & df['elf1_max'] <= df['elf2_max'])
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0].int()
df['elf1_max'] = df['elf1'].str.split('-').str[1].int()
df['elf2_min'] = df['elf2'].str.split('-').str[0].int()
df['elf2_max'] = df['elf2'].str.split('-').str[1].int()
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
elf_vals = ['elf1_min', 'elf1_max', 'elf2_min', 'elf2_max']
df[elf_vals] = df[elf_vals].apply(pd.to_numeric)
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2'] = (df['elf2_min'] <= df['elf1_min'] & df['elf1_min'] <= df['elf2_max']) \
& (df['elf2_min'] <= df['elf1_max'] & df['elf1_max'] <= df['elf2_max'])
(df['elf2_min'] <= df['elf1_min']) & (df['elf1_min'] <= df['elf2_max'])
df['check_1_2'] = (df['elf2_min'] <= df['elf1_min']) & (df['elf1_min'] <= df['elf2_max']) \
& (df['elf2_min'] <= df['elf1_max'] )& (df['elf1_max'] <= df['elf2_max'])
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
elf_vals = ['elf1_min', 'elf1_max', 'elf2_min', 'elf2_max']
df[elf_vals] = df[elf_vals].apply(pd.to_numeric)
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2'] = (df['elf2_min'] <= df['elf1_min']) & (df['elf1_min'] <= df['elf2_max']) \
& (df['elf2_min'] <= df['elf1_max'] )& (df['elf1_max'] <= df['elf2_max'])
df['check_2_1'] = (df['elf1_min'] <= df['elf2_min']) & (df['elf2_min'] <= df['elf1_max']) \
& (df['elf1_min'] <= df['elf2_max'] )& (df['elf2_max'] <= df['elf1_max'])
# Select instances where one or both elfs overlap #
num_overlapping_pairs = df.loc[df['check_1_2'] | df['check_2_1']].shape[0]
num_overlapping_pairs
# reticulate::repl_python()
import time
import numpy as np
import pandas as pd
# Load file #
input_file = open("input.txt", "r")
input = input_file.read().split('\n')
# Start timer #
print("Starting Part One")
start_time = time.time()
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input_array, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
elf_vals = ['elf1_min', 'elf1_max', 'elf2_min', 'elf2_max']
df[elf_vals] = df[elf_vals].apply(pd.to_numeric)
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2'] = (df['elf2_min'] <= df['elf1_min']) & (df['elf1_min'] <= df['elf2_max']) \
& (df['elf2_min'] <= df['elf1_max'] )& (df['elf1_max'] <= df['elf2_max'])
df['check_2_1'] = (df['elf1_min'] <= df['elf2_min']) & (df['elf2_min'] <= df['elf1_max']) \
& (df['elf1_min'] <= df['elf2_max'] )& (df['elf2_max'] <= df['elf1_max'])
# Select instances where one or both elfs overlap #
num_overlapping_pairs = df.loc[df['check_1_2'] | df['check_2_1']].shape[0]
stop_time = time.time() - start_time
print("Total ({time} s): {value}".format(time = round(stop_time,3), value = str(num_overlapping_pairs)))
# reticulate::repl_python()
import time
import numpy as np
import pandas as pd
# Load file #
input_file = open("input.txt", "r")
input = input_file.read().split('\n')
# Start timer #
print("Starting Timer)
start_time = time.time()
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
elf_vals = ['elf1_min', 'elf1_max', 'elf2_min', 'elf2_max']
df[elf_vals] = df[elf_vals].apply(pd.to_numeric)
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2'] = (df['elf2_min'] <= df['elf1_min']) & (df['elf1_min'] <= df['elf2_max']) \
& (df['elf2_min'] <= df['elf1_max'] )& (df['elf1_max'] <= df['elf2_max'])
df['check_2_1'] = (df['elf1_min'] <= df['elf2_min']) & (df['elf2_min'] <= df['elf1_max']) \
& (df['elf1_min'] <= df['elf2_max'] )& (df['elf2_max'] <= df['elf1_max'])
# Select instances where one or both elfs overlap #
num_overlapping_pairs = df.loc[df['check_1_2'] | df['check_2_1']].shape[0]
stop_time = time.time() - start_time
print("Total ({time} s): {value}".format(time = round(stop_time,3), value = str(num_overlapping_pairs)))
# Start timer #
print("Starting Timer)
start_time = time.time()
# Set up data (avoid loop by using pandas) #
df = pd.DataFrame(input, columns = ['pairs'])
df['elf1'] = df['pairs'].str.split(',').str[0]
df['elf2'] = df['pairs'].str.split(',').str[1]
df['elf1_min'] = df['elf1'].str.split('-').str[0]
df['elf1_max'] = df['elf1'].str.split('-').str[1]
df['elf2_min'] = df['elf2'].str.split('-').str[0]
df['elf2_max'] = df['elf2'].str.split('-').str[1]
elf_vals = ['elf1_min', 'elf1_max', 'elf2_min', 'elf2_max']
df[elf_vals] = df[elf_vals].apply(pd.to_numeric)
# Check if elfs overlap (1 within 2, and 2 within 1) #
df['check_1_2'] = (df['elf2_min'] <= df['elf1_min']) & (df['elf1_min'] <= df['elf2_max']) \
& (df['elf2_min'] <= df['elf1_max'] )& (df['elf1_max'] <= df['elf2_max'])
df['check_2_1'] = (df['elf1_min'] <= df['elf2_min']) & (df['elf2_min'] <= df['elf1_max']) \
& (df['elf1_min'] <= df['elf2_max'] )& (df['elf2_max'] <= df['elf1_max'])
# Select instances where one or both elfs overlap #
num_overlapping_pairs = df.loc[df['check_1_2'] | df['check_2_1']].shape[0]
stop_time = time.time() - start_time
print("Total ({time} s): {value}".format(time = round(stop_time,3), value = str(num_overlapping_pairs)))
